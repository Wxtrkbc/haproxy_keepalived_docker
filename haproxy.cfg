global
  daemon
  log 127.0.0.1 local1 info
  maxconn 100000

  # user haproxy
  # group haproxy
  # nbproc 2       # 设置haproxy启动的时候可创建的进程数 应小于cpu核心数
  # pidfile /var/run/haproxy.pid  # 指定Haproxy进程的pid文件。启动进程的用户，必须有访问此文件的权限


defaults
  log global                # 应用全局的日志设置
  mode http
  option redispatch         # 当使用了cookie时，haproxy将会将请求的后端服务器的serverID插入到cookie中，
                            # 以保证会话的session持久性，而此时，后端服务器宕机，但是客户端的cookie不会刷新，
                            # 设置此参数，将会将客户请求强制定向到另外一个后端server上，以保证服务的正常。

  option httplog            # 启用日志记录HTTP的详细请求
  option forwardfor         # 服务器上的应用程序记录发起请求的客户端地址
  retries 3
  timeout http-request 10s
  timeout queue 1m          # 请求在队列里的超时时间
  timeout connect 10s
  timeout client 1m
  timeout server 1m
  timeout check 10s          # 检测超时
  timeout http-keep-alive 10
  maxconn 40000              # 每个进程可用的最大连接数

  # option abortonclose     # 当服务器负载很高的时候，自动结束掉当前队列处理时间比较长的连接
  # option dontlognull      # 启用该项，日志中将不会记录空连接，所谓空连接就是在上游的负载均衡或者监控系统为了探测该服务是否存活
                            # 可用时需要定期的连接或者获取某一固定的组件或页面

listen stats
   bind 0.0.0.0:1984
   mode http
   stats enable
   stats uri /
   stats refresh 15s
   stats realm Haproxy\ Stats
   stats auth admin:admin

frontend main
   bind *:80
   default_backend app

   # maxconn 2048   # 设定一个前端的最大并发连接数. haproxy会为每个连接维持两个缓冲(8KB*2)，再加上其它的数据，每个连接将大约占用17KB的RAM空间。
                    # 这意味着1GB的可用RAM空间时将能维护40000-50000并发连接。如果指定了过大值，极端场景下，其最终占据的空间可能会超出当前主机的可用内存


backend app
   balance roundrobin
   mode http
   server app1 172.16.238.12:80 check inter 2000 rise 2 fall 5
   server app2 172.16.238.11:80 check inter 2000 rise 2 fall 5
   server app3 172.16.238.10:80 check inter 2000 rise 2 fall 5



#balance
#    - roundrobin
#      基于权重进行轮叫，在服务器的处理时间保持均匀分布时，这是最平衡、最公平的算法。
#      此算法是动态的，这表示其权重可以在运行时进行调整，不过，在设计上，
#      每个后端服务器仅能最多接受4128个连接；并支持慢启动
#    - static-rr
#      基于权重进行轮叫，与roundrobin类似，但是为静态方法，在运行时调整其服务器权重不会生效；
#      不过，其在后端服务器连接数上没有限制；不支持慢启动，在高负荷的情况下，服务器重新上线时会立即被分配大量连接。
#    - leastconn
#      适用于长连接的会话，新的连接请求被派发至具有最少连接数目的后端服务器；在有着较长时间会话的场景中推荐使用此算法，
#      如LDAP、SQL等，其并不太适用于较短会话的应用层协议，如HTTP；此算法是动态的，可以在运行时调整其权重；
#    - source
#      将请求的源地址进行hash运算，并由后端服务器的权重总数相除后派发至某匹配的服务器；
#      这可以使得同一个客户端IP的请求始终被派发至某特定的服务器；
#      不过，当服务器权重总数发生变化时，如某服务器宕机或添加了新的服务器，
#      许多客户端的请求可能会被派发至与此前请求不同的服务器；常用于负载均衡无cookie功能的基于TCP的协议；
#      其默认为静态，不过也可以使用hash-type修改此特性；

# server
#   inter 设定健康状态检查的时间间隔，单位为毫秒，默认为2000；也可以使用fastinter和downinter来根据服务器端状态优化此时间延迟
#   rise  设定健康状态检查中，某离线的server从离线状态转换至正常状态需要成功检查的次数
#   fall  确认server从正常状态转换为不可用状态需要检查的次数
#   weight 权重，默认为1，最大值为256，0表示不参与负载均衡（不被调度）

